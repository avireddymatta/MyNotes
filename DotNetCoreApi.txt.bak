"DotNetCore 6 Api Notes" 

Middleware Exceptions Service:
---------------------
# Constructor Parameters: RequestDelegate next, ILogger<ExceptionMiddleWare> logger, IHostEnvironment env
# Add method InvokeAsync with HttpContext as parameter

	try
	{
		await next(context);
	}
	catch (Exception ex)
	{
		logger.LogError(ex, ex.Message);

		context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;
		context.Response.ContentType = "application/json";

		//AppException is class with StatusCode, Message, Details properties
		var response = env.IsDevelopment() ? new AppException(context.Response.StatusCode, ex.Message, ex.StackTrace?.ToString())
											: new AppException(context.Response.StatusCode, "Server Error");

		var jsonOptions = new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase };
		var json = JsonSerializer.Serialize(response, jsonOptions);

		await context.Response.WriteAsync(json);
	}


Identity Logics:
----------------
Pacakges:
--------
Microsoft.AspNetCore.Identity 
Microsoft.AspNetCore.Authentication.JwtBearer;
Microsoft.IdentityModel.Tokens;
Microsoft.AspNetCore.Authorization;
Microsoft.AspNetCore.Mvc.Authorization;

# For Default NetTables class IdentityUser inheritance for User Class and make a migration

# For DbContext use inheritance 'IdentityDbContext' with User class as Generic Type

# Configure IdentityDbContext at Program.cs 
Password Requirements
SignInManager User Class

builder.Services.AddIdentityCore<AppUser>(opt =>
            {
                opt.Password.RequireNonAlphanumeric = false;
            })
            .AddEntityFrameworkStores<DataContext>()
            .AddSignInManager<SignInManager<AppUser>>();

# JwtBearer Token Validation
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
.AddJwtBearer(opt =>
{
    opt.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuerSigningKey = true,
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes("Super secret key")),
        ValidateIssuer = false,
        ValidateAudience = false
    };
});


# Add Policy Services to implement Authorization through out all controllers

builder.Services.AddControllers(opt =>
{
    var policy = new AuthorizationPolicyBuilder().RequireAuthenticatedUser().Build();
    opt.Filters.Add(new AuthorizeFilter(policy));
})

# UserManager, SignInManager Classes are used to Manager User CRUD, SignIn Options

# get Current User using ClaimTypes
  this.userManager.FindByEmailAsync(User.FindFirstValue(ClaimTypes.Email))
  this.signInManager.CheckPasswordSignInAsync(user, loginDetails.Password, false);
  
  
# Token Creation ( Create as a Service )
  Create Claim List with needed Data 
  Generate SymmetricSecurityKey(Encoding.UTF8.GetBytes("Your key"))
  Generate SigningCredentials(key, #hashAlgorithm)
  Generate SecurityTokenDescriptor (Subject: ClaimsIdentity, SigningCredentials, Expires)
  Generate JwtSecurityTokenHandler
  CreateToken by using above tokenHandler passing generated SecurityTokenDescriptor
  Get Token by using tokenHandler passing createdToken
  
# CQRS Pattern: use Command for Db write Operations, Query for Read Operations
  Package: MediatR
  
  Command/Query inherits IRequest Interface (with Generic type of return value, optional), passing input parameters as Get Set Properties
  Requests taken care by handlers
  Handler inherits IRequestHandler Interface with above Command/Query class and Generic return type if needed
  
  Note: Use Common Return Object at this Handler Return type (IsSuccess, Error, Value,  Success/Error static methods to fill these data with same return type class and value as generic type)
        At Api Handle these return object to decide Ok/BadRequest/NotFound


  
  
 